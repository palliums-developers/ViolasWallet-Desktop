/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var access_path_pb = require('./access_path_pb.js');
goog.object.extend(proto, access_path_pb);
var events_pb = require('./events_pb.js');
goog.object.extend(proto, events_pb);
var proof_pb = require('./proof_pb.js');
goog.object.extend(proto, proof_pb);
var transaction_info_pb = require('./transaction_info_pb.js');
goog.object.extend(proto, transaction_info_pb);
var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js');
goog.object.extend(proto, google_protobuf_wrappers_pb);
goog.exportSymbol('proto.types.AccountState', null, global);
goog.exportSymbol('proto.types.SignedTransaction', null, global);
goog.exportSymbol('proto.types.SignedTransactionsBlock', null, global);
goog.exportSymbol('proto.types.Transaction', null, global);
goog.exportSymbol('proto.types.TransactionArgument', null, global);
goog.exportSymbol('proto.types.TransactionArgument.ArgType', null, global);
goog.exportSymbol('proto.types.TransactionListWithProof', null, global);
goog.exportSymbol('proto.types.TransactionToCommit', null, global);
goog.exportSymbol('proto.types.TransactionWithProof', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.TransactionArgument = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.TransactionArgument, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.TransactionArgument.displayName = 'proto.types.TransactionArgument';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.TransactionArgument.prototype.toObject = function(opt_includeInstance) {
  return proto.types.TransactionArgument.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.TransactionArgument} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.TransactionArgument.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.TransactionArgument}
 */
proto.types.TransactionArgument.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.TransactionArgument;
  return proto.types.TransactionArgument.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.TransactionArgument} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.TransactionArgument}
 */
proto.types.TransactionArgument.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.TransactionArgument.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.TransactionArgument.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.TransactionArgument} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.TransactionArgument.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.types.TransactionArgument.ArgType = {
  U64: 0,
  ADDRESS: 1,
  STRING: 2,
  BYTEARRAY: 3
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.SignedTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.SignedTransaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.SignedTransaction.displayName = 'proto.types.SignedTransaction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.SignedTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.types.SignedTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.SignedTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.SignedTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    txnBytes: msg.getTxnBytes_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.SignedTransaction}
 */
proto.types.SignedTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.SignedTransaction;
  return proto.types.SignedTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.SignedTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.SignedTransaction}
 */
proto.types.SignedTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxnBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.SignedTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.SignedTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.SignedTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.SignedTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxnBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional bytes txn_bytes = 5;
 * @return {!(string|Uint8Array)}
 */
proto.types.SignedTransaction.prototype.getTxnBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes txn_bytes = 5;
 * This is a type-conversion wrapper around `getTxnBytes()`
 * @return {string}
 */
proto.types.SignedTransaction.prototype.getTxnBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxnBytes()));
};


/**
 * optional bytes txn_bytes = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxnBytes()`
 * @return {!Uint8Array}
 */
proto.types.SignedTransaction.prototype.getTxnBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxnBytes()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.SignedTransaction.prototype.setTxnBytes = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.Transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.Transaction.displayName = 'proto.types.Transaction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.Transaction.prototype.toObject = function(opt_includeInstance) {
  return proto.types.Transaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.Transaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Transaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    transaction: msg.getTransaction_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.Transaction}
 */
proto.types.Transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.Transaction;
  return proto.types.Transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.Transaction}
 */
proto.types.Transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTransaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.Transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Transaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransaction_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes transaction = 1;
 * @return {!(string|Uint8Array)}
 */
proto.types.Transaction.prototype.getTransaction = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes transaction = 1;
 * This is a type-conversion wrapper around `getTransaction()`
 * @return {string}
 */
proto.types.Transaction.prototype.getTransaction_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTransaction()));
};


/**
 * optional bytes transaction = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransaction()`
 * @return {!Uint8Array}
 */
proto.types.Transaction.prototype.getTransaction_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTransaction()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.Transaction.prototype.setTransaction = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.TransactionWithProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.TransactionWithProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.TransactionWithProof.displayName = 'proto.types.TransactionWithProof';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.TransactionWithProof.prototype.toObject = function(opt_includeInstance) {
  return proto.types.TransactionWithProof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.TransactionWithProof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.TransactionWithProof.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, 0),
    transaction: (f = msg.getTransaction()) && proto.types.Transaction.toObject(includeInstance, f),
    proof: (f = msg.getProof()) && proof_pb.TransactionProof.toObject(includeInstance, f),
    events: (f = msg.getEvents()) && events_pb.EventsList.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.TransactionWithProof}
 */
proto.types.TransactionWithProof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.TransactionWithProof;
  return proto.types.TransactionWithProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.TransactionWithProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.TransactionWithProof}
 */
proto.types.TransactionWithProof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVersion(value);
      break;
    case 2:
      var value = new proto.types.Transaction;
      reader.readMessage(value,proto.types.Transaction.deserializeBinaryFromReader);
      msg.setTransaction(value);
      break;
    case 3:
      var value = new proof_pb.TransactionProof;
      reader.readMessage(value,proof_pb.TransactionProof.deserializeBinaryFromReader);
      msg.setProof(value);
      break;
    case 4:
      var value = new events_pb.EventsList;
      reader.readMessage(value,events_pb.EventsList.deserializeBinaryFromReader);
      msg.setEvents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.TransactionWithProof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.TransactionWithProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.TransactionWithProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.TransactionWithProof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTransaction();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.types.Transaction.serializeBinaryToWriter
    );
  }
  f = message.getProof();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proof_pb.TransactionProof.serializeBinaryToWriter
    );
  }
  f = message.getEvents();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      events_pb.EventsList.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 version = 1;
 * @return {number}
 */
proto.types.TransactionWithProof.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.types.TransactionWithProof.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Transaction transaction = 2;
 * @return {?proto.types.Transaction}
 */
proto.types.TransactionWithProof.prototype.getTransaction = function() {
  return /** @type{?proto.types.Transaction} */ (
    jspb.Message.getWrapperField(this, proto.types.Transaction, 2));
};


/** @param {?proto.types.Transaction|undefined} value */
proto.types.TransactionWithProof.prototype.setTransaction = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.types.TransactionWithProof.prototype.clearTransaction = function() {
  this.setTransaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.TransactionWithProof.prototype.hasTransaction = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TransactionProof proof = 3;
 * @return {?proto.types.TransactionProof}
 */
proto.types.TransactionWithProof.prototype.getProof = function() {
  return /** @type{?proto.types.TransactionProof} */ (
    jspb.Message.getWrapperField(this, proof_pb.TransactionProof, 3));
};


/** @param {?proto.types.TransactionProof|undefined} value */
proto.types.TransactionWithProof.prototype.setProof = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.types.TransactionWithProof.prototype.clearProof = function() {
  this.setProof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.TransactionWithProof.prototype.hasProof = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EventsList events = 4;
 * @return {?proto.types.EventsList}
 */
proto.types.TransactionWithProof.prototype.getEvents = function() {
  return /** @type{?proto.types.EventsList} */ (
    jspb.Message.getWrapperField(this, events_pb.EventsList, 4));
};


/** @param {?proto.types.EventsList|undefined} value */
proto.types.TransactionWithProof.prototype.setEvents = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.types.TransactionWithProof.prototype.clearEvents = function() {
  this.setEvents(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.TransactionWithProof.prototype.hasEvents = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.SignedTransactionsBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.SignedTransactionsBlock.repeatedFields_, null);
};
goog.inherits(proto.types.SignedTransactionsBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.SignedTransactionsBlock.displayName = 'proto.types.SignedTransactionsBlock';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.SignedTransactionsBlock.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.SignedTransactionsBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.types.SignedTransactionsBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.SignedTransactionsBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.SignedTransactionsBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionsList: jspb.Message.toObjectList(msg.getTransactionsList(),
    proto.types.SignedTransaction.toObject, includeInstance),
    validatorPublicKey: msg.getValidatorPublicKey_asB64(),
    validatorSignature: msg.getValidatorSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.SignedTransactionsBlock}
 */
proto.types.SignedTransactionsBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.SignedTransactionsBlock;
  return proto.types.SignedTransactionsBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.SignedTransactionsBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.SignedTransactionsBlock}
 */
proto.types.SignedTransactionsBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.SignedTransaction;
      reader.readMessage(value,proto.types.SignedTransaction.deserializeBinaryFromReader);
      msg.addTransactions(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValidatorPublicKey(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValidatorSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.SignedTransactionsBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.SignedTransactionsBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.SignedTransactionsBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.SignedTransactionsBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.types.SignedTransaction.serializeBinaryToWriter
    );
  }
  f = message.getValidatorPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getValidatorSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * repeated SignedTransaction transactions = 1;
 * @return {!Array<!proto.types.SignedTransaction>}
 */
proto.types.SignedTransactionsBlock.prototype.getTransactionsList = function() {
  return /** @type{!Array<!proto.types.SignedTransaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.SignedTransaction, 1));
};


/** @param {!Array<!proto.types.SignedTransaction>} value */
proto.types.SignedTransactionsBlock.prototype.setTransactionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.types.SignedTransaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.SignedTransaction}
 */
proto.types.SignedTransactionsBlock.prototype.addTransactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.SignedTransaction, opt_index);
};


proto.types.SignedTransactionsBlock.prototype.clearTransactionsList = function() {
  this.setTransactionsList([]);
};


/**
 * optional bytes validator_public_key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.types.SignedTransactionsBlock.prototype.getValidatorPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes validator_public_key = 2;
 * This is a type-conversion wrapper around `getValidatorPublicKey()`
 * @return {string}
 */
proto.types.SignedTransactionsBlock.prototype.getValidatorPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValidatorPublicKey()));
};


/**
 * optional bytes validator_public_key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValidatorPublicKey()`
 * @return {!Uint8Array}
 */
proto.types.SignedTransactionsBlock.prototype.getValidatorPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValidatorPublicKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.SignedTransactionsBlock.prototype.setValidatorPublicKey = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes validator_signature = 3;
 * @return {!(string|Uint8Array)}
 */
proto.types.SignedTransactionsBlock.prototype.getValidatorSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes validator_signature = 3;
 * This is a type-conversion wrapper around `getValidatorSignature()`
 * @return {string}
 */
proto.types.SignedTransactionsBlock.prototype.getValidatorSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValidatorSignature()));
};


/**
 * optional bytes validator_signature = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValidatorSignature()`
 * @return {!Uint8Array}
 */
proto.types.SignedTransactionsBlock.prototype.getValidatorSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValidatorSignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.SignedTransactionsBlock.prototype.setValidatorSignature = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.AccountState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.AccountState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.AccountState.displayName = 'proto.types.AccountState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.AccountState.prototype.toObject = function(opt_includeInstance) {
  return proto.types.AccountState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.AccountState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.AccountState.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64(),
    blob: msg.getBlob_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.AccountState}
 */
proto.types.AccountState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.AccountState;
  return proto.types.AccountState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.AccountState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.AccountState}
 */
proto.types.AccountState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlob(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.AccountState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.AccountState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.AccountState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.AccountState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getBlob_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.types.AccountState.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.types.AccountState.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.types.AccountState.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.AccountState.prototype.setAddress = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes blob = 2;
 * @return {!(string|Uint8Array)}
 */
proto.types.AccountState.prototype.getBlob = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes blob = 2;
 * This is a type-conversion wrapper around `getBlob()`
 * @return {string}
 */
proto.types.AccountState.prototype.getBlob_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlob()));
};


/**
 * optional bytes blob = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlob()`
 * @return {!Uint8Array}
 */
proto.types.AccountState.prototype.getBlob_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlob()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.AccountState.prototype.setBlob = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.TransactionToCommit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.TransactionToCommit.repeatedFields_, null);
};
goog.inherits(proto.types.TransactionToCommit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.TransactionToCommit.displayName = 'proto.types.TransactionToCommit';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.TransactionToCommit.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.TransactionToCommit.prototype.toObject = function(opt_includeInstance) {
  return proto.types.TransactionToCommit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.TransactionToCommit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.TransactionToCommit.toObject = function(includeInstance, msg) {
  var f, obj = {
    transaction: (f = msg.getTransaction()) && proto.types.Transaction.toObject(includeInstance, f),
    accountStatesList: jspb.Message.toObjectList(msg.getAccountStatesList(),
    proto.types.AccountState.toObject, includeInstance),
    eventsList: jspb.Message.toObjectList(msg.getEventsList(),
    events_pb.Event.toObject, includeInstance),
    gasUsed: jspb.Message.getFieldWithDefault(msg, 4, 0),
    majorStatus: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.TransactionToCommit}
 */
proto.types.TransactionToCommit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.TransactionToCommit;
  return proto.types.TransactionToCommit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.TransactionToCommit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.TransactionToCommit}
 */
proto.types.TransactionToCommit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.Transaction;
      reader.readMessage(value,proto.types.Transaction.deserializeBinaryFromReader);
      msg.setTransaction(value);
      break;
    case 2:
      var value = new proto.types.AccountState;
      reader.readMessage(value,proto.types.AccountState.deserializeBinaryFromReader);
      msg.addAccountStates(value);
      break;
    case 3:
      var value = new events_pb.Event;
      reader.readMessage(value,events_pb.Event.deserializeBinaryFromReader);
      msg.addEvents(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasUsed(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMajorStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.TransactionToCommit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.TransactionToCommit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.TransactionToCommit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.TransactionToCommit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransaction();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.types.Transaction.serializeBinaryToWriter
    );
  }
  f = message.getAccountStatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.types.AccountState.serializeBinaryToWriter
    );
  }
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      events_pb.Event.serializeBinaryToWriter
    );
  }
  f = message.getGasUsed();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getMajorStatus();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional Transaction transaction = 1;
 * @return {?proto.types.Transaction}
 */
proto.types.TransactionToCommit.prototype.getTransaction = function() {
  return /** @type{?proto.types.Transaction} */ (
    jspb.Message.getWrapperField(this, proto.types.Transaction, 1));
};


/** @param {?proto.types.Transaction|undefined} value */
proto.types.TransactionToCommit.prototype.setTransaction = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.types.TransactionToCommit.prototype.clearTransaction = function() {
  this.setTransaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.TransactionToCommit.prototype.hasTransaction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated AccountState account_states = 2;
 * @return {!Array<!proto.types.AccountState>}
 */
proto.types.TransactionToCommit.prototype.getAccountStatesList = function() {
  return /** @type{!Array<!proto.types.AccountState>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.AccountState, 2));
};


/** @param {!Array<!proto.types.AccountState>} value */
proto.types.TransactionToCommit.prototype.setAccountStatesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.types.AccountState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.AccountState}
 */
proto.types.TransactionToCommit.prototype.addAccountStates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.types.AccountState, opt_index);
};


proto.types.TransactionToCommit.prototype.clearAccountStatesList = function() {
  this.setAccountStatesList([]);
};


/**
 * repeated Event events = 3;
 * @return {!Array<!proto.types.Event>}
 */
proto.types.TransactionToCommit.prototype.getEventsList = function() {
  return /** @type{!Array<!proto.types.Event>} */ (
    jspb.Message.getRepeatedWrapperField(this, events_pb.Event, 3));
};


/** @param {!Array<!proto.types.Event>} value */
proto.types.TransactionToCommit.prototype.setEventsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.types.Event=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.Event}
 */
proto.types.TransactionToCommit.prototype.addEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.types.Event, opt_index);
};


proto.types.TransactionToCommit.prototype.clearEventsList = function() {
  this.setEventsList([]);
};


/**
 * optional uint64 gas_used = 4;
 * @return {number}
 */
proto.types.TransactionToCommit.prototype.getGasUsed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.types.TransactionToCommit.prototype.setGasUsed = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 major_status = 5;
 * @return {number}
 */
proto.types.TransactionToCommit.prototype.getMajorStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.types.TransactionToCommit.prototype.setMajorStatus = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.TransactionListWithProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.TransactionListWithProof.repeatedFields_, null);
};
goog.inherits(proto.types.TransactionListWithProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.TransactionListWithProof.displayName = 'proto.types.TransactionListWithProof';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.TransactionListWithProof.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.TransactionListWithProof.prototype.toObject = function(opt_includeInstance) {
  return proto.types.TransactionListWithProof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.TransactionListWithProof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.TransactionListWithProof.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionsList: jspb.Message.toObjectList(msg.getTransactionsList(),
    proto.types.Transaction.toObject, includeInstance),
    eventsForVersions: (f = msg.getEventsForVersions()) && events_pb.EventsForVersions.toObject(includeInstance, f),
    firstTransactionVersion: (f = msg.getFirstTransactionVersion()) && google_protobuf_wrappers_pb.UInt64Value.toObject(includeInstance, f),
    proof: (f = msg.getProof()) && proof_pb.TransactionListProof.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.TransactionListWithProof}
 */
proto.types.TransactionListWithProof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.TransactionListWithProof;
  return proto.types.TransactionListWithProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.TransactionListWithProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.TransactionListWithProof}
 */
proto.types.TransactionListWithProof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.Transaction;
      reader.readMessage(value,proto.types.Transaction.deserializeBinaryFromReader);
      msg.addTransactions(value);
      break;
    case 2:
      var value = new events_pb.EventsForVersions;
      reader.readMessage(value,events_pb.EventsForVersions.deserializeBinaryFromReader);
      msg.setEventsForVersions(value);
      break;
    case 3:
      var value = new google_protobuf_wrappers_pb.UInt64Value;
      reader.readMessage(value,google_protobuf_wrappers_pb.UInt64Value.deserializeBinaryFromReader);
      msg.setFirstTransactionVersion(value);
      break;
    case 4:
      var value = new proof_pb.TransactionListProof;
      reader.readMessage(value,proof_pb.TransactionListProof.deserializeBinaryFromReader);
      msg.setProof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.TransactionListWithProof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.TransactionListWithProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.TransactionListWithProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.TransactionListWithProof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.types.Transaction.serializeBinaryToWriter
    );
  }
  f = message.getEventsForVersions();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      events_pb.EventsForVersions.serializeBinaryToWriter
    );
  }
  f = message.getFirstTransactionVersion();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_wrappers_pb.UInt64Value.serializeBinaryToWriter
    );
  }
  f = message.getProof();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proof_pb.TransactionListProof.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Transaction transactions = 1;
 * @return {!Array<!proto.types.Transaction>}
 */
proto.types.TransactionListWithProof.prototype.getTransactionsList = function() {
  return /** @type{!Array<!proto.types.Transaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.Transaction, 1));
};


/** @param {!Array<!proto.types.Transaction>} value */
proto.types.TransactionListWithProof.prototype.setTransactionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.types.Transaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.Transaction}
 */
proto.types.TransactionListWithProof.prototype.addTransactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.Transaction, opt_index);
};


proto.types.TransactionListWithProof.prototype.clearTransactionsList = function() {
  this.setTransactionsList([]);
};


/**
 * optional EventsForVersions events_for_versions = 2;
 * @return {?proto.types.EventsForVersions}
 */
proto.types.TransactionListWithProof.prototype.getEventsForVersions = function() {
  return /** @type{?proto.types.EventsForVersions} */ (
    jspb.Message.getWrapperField(this, events_pb.EventsForVersions, 2));
};


/** @param {?proto.types.EventsForVersions|undefined} value */
proto.types.TransactionListWithProof.prototype.setEventsForVersions = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.types.TransactionListWithProof.prototype.clearEventsForVersions = function() {
  this.setEventsForVersions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.TransactionListWithProof.prototype.hasEventsForVersions = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.UInt64Value first_transaction_version = 3;
 * @return {?proto.google.protobuf.UInt64Value}
 */
proto.types.TransactionListWithProof.prototype.getFirstTransactionVersion = function() {
  return /** @type{?proto.google.protobuf.UInt64Value} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.UInt64Value, 3));
};


/** @param {?proto.google.protobuf.UInt64Value|undefined} value */
proto.types.TransactionListWithProof.prototype.setFirstTransactionVersion = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.types.TransactionListWithProof.prototype.clearFirstTransactionVersion = function() {
  this.setFirstTransactionVersion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.TransactionListWithProof.prototype.hasFirstTransactionVersion = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TransactionListProof proof = 4;
 * @return {?proto.types.TransactionListProof}
 */
proto.types.TransactionListWithProof.prototype.getProof = function() {
  return /** @type{?proto.types.TransactionListProof} */ (
    jspb.Message.getWrapperField(this, proof_pb.TransactionListProof, 4));
};


/** @param {?proto.types.TransactionListProof|undefined} value */
proto.types.TransactionListWithProof.prototype.setProof = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.types.TransactionListWithProof.prototype.clearProof = function() {
  this.setProof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.TransactionListWithProof.prototype.hasProof = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.types);
