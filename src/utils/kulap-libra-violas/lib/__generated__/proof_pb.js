/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var transaction_info_pb = require('./transaction_info_pb.js');
goog.object.extend(proto, transaction_info_pb);
goog.exportSymbol('proto.types.AccountStateProof', null, global);
goog.exportSymbol('proto.types.AccumulatorConsistencyProof', null, global);
goog.exportSymbol('proto.types.AccumulatorProof', null, global);
goog.exportSymbol('proto.types.AccumulatorRangeProof', null, global);
goog.exportSymbol('proto.types.EventProof', null, global);
goog.exportSymbol('proto.types.SparseMerkleProof', null, global);
goog.exportSymbol('proto.types.TransactionListProof', null, global);
goog.exportSymbol('proto.types.TransactionProof', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.AccumulatorProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.AccumulatorProof.repeatedFields_, null);
};
goog.inherits(proto.types.AccumulatorProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.AccumulatorProof.displayName = 'proto.types.AccumulatorProof';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.AccumulatorProof.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.AccumulatorProof.prototype.toObject = function(opt_includeInstance) {
  return proto.types.AccumulatorProof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.AccumulatorProof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.AccumulatorProof.toObject = function(includeInstance, msg) {
  var f, obj = {
    siblingsList: msg.getSiblingsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.AccumulatorProof}
 */
proto.types.AccumulatorProof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.AccumulatorProof;
  return proto.types.AccumulatorProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.AccumulatorProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.AccumulatorProof}
 */
proto.types.AccumulatorProof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addSiblings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.AccumulatorProof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.AccumulatorProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.AccumulatorProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.AccumulatorProof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSiblingsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
};


/**
 * repeated bytes siblings = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.types.AccumulatorProof.prototype.getSiblingsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes siblings = 1;
 * This is a type-conversion wrapper around `getSiblingsList()`
 * @return {!Array<string>}
 */
proto.types.AccumulatorProof.prototype.getSiblingsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getSiblingsList()));
};


/**
 * repeated bytes siblings = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSiblingsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.types.AccumulatorProof.prototype.getSiblingsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getSiblingsList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.types.AccumulatorProof.prototype.setSiblingsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.types.AccumulatorProof.prototype.addSiblings = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.types.AccumulatorProof.prototype.clearSiblingsList = function() {
  this.setSiblingsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.SparseMerkleProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.SparseMerkleProof.repeatedFields_, null);
};
goog.inherits(proto.types.SparseMerkleProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.SparseMerkleProof.displayName = 'proto.types.SparseMerkleProof';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.SparseMerkleProof.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.SparseMerkleProof.prototype.toObject = function(opt_includeInstance) {
  return proto.types.SparseMerkleProof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.SparseMerkleProof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.SparseMerkleProof.toObject = function(includeInstance, msg) {
  var f, obj = {
    leaf: msg.getLeaf_asB64(),
    siblingsList: msg.getSiblingsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.SparseMerkleProof}
 */
proto.types.SparseMerkleProof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.SparseMerkleProof;
  return proto.types.SparseMerkleProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.SparseMerkleProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.SparseMerkleProof}
 */
proto.types.SparseMerkleProof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLeaf(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addSiblings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.SparseMerkleProof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.SparseMerkleProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.SparseMerkleProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.SparseMerkleProof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLeaf_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSiblingsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes leaf = 1;
 * @return {!(string|Uint8Array)}
 */
proto.types.SparseMerkleProof.prototype.getLeaf = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes leaf = 1;
 * This is a type-conversion wrapper around `getLeaf()`
 * @return {string}
 */
proto.types.SparseMerkleProof.prototype.getLeaf_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLeaf()));
};


/**
 * optional bytes leaf = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLeaf()`
 * @return {!Uint8Array}
 */
proto.types.SparseMerkleProof.prototype.getLeaf_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLeaf()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.SparseMerkleProof.prototype.setLeaf = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated bytes siblings = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.types.SparseMerkleProof.prototype.getSiblingsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes siblings = 2;
 * This is a type-conversion wrapper around `getSiblingsList()`
 * @return {!Array<string>}
 */
proto.types.SparseMerkleProof.prototype.getSiblingsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getSiblingsList()));
};


/**
 * repeated bytes siblings = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSiblingsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.types.SparseMerkleProof.prototype.getSiblingsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getSiblingsList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.types.SparseMerkleProof.prototype.setSiblingsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.types.SparseMerkleProof.prototype.addSiblings = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.types.SparseMerkleProof.prototype.clearSiblingsList = function() {
  this.setSiblingsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.AccumulatorConsistencyProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.AccumulatorConsistencyProof.repeatedFields_, null);
};
goog.inherits(proto.types.AccumulatorConsistencyProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.AccumulatorConsistencyProof.displayName = 'proto.types.AccumulatorConsistencyProof';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.AccumulatorConsistencyProof.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.AccumulatorConsistencyProof.prototype.toObject = function(opt_includeInstance) {
  return proto.types.AccumulatorConsistencyProof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.AccumulatorConsistencyProof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.AccumulatorConsistencyProof.toObject = function(includeInstance, msg) {
  var f, obj = {
    subtreesList: msg.getSubtreesList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.AccumulatorConsistencyProof}
 */
proto.types.AccumulatorConsistencyProof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.AccumulatorConsistencyProof;
  return proto.types.AccumulatorConsistencyProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.AccumulatorConsistencyProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.AccumulatorConsistencyProof}
 */
proto.types.AccumulatorConsistencyProof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addSubtrees(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.AccumulatorConsistencyProof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.AccumulatorConsistencyProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.AccumulatorConsistencyProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.AccumulatorConsistencyProof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubtreesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
};


/**
 * repeated bytes subtrees = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.types.AccumulatorConsistencyProof.prototype.getSubtreesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes subtrees = 1;
 * This is a type-conversion wrapper around `getSubtreesList()`
 * @return {!Array<string>}
 */
proto.types.AccumulatorConsistencyProof.prototype.getSubtreesList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getSubtreesList()));
};


/**
 * repeated bytes subtrees = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSubtreesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.types.AccumulatorConsistencyProof.prototype.getSubtreesList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getSubtreesList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.types.AccumulatorConsistencyProof.prototype.setSubtreesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.types.AccumulatorConsistencyProof.prototype.addSubtrees = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.types.AccumulatorConsistencyProof.prototype.clearSubtreesList = function() {
  this.setSubtreesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.AccumulatorRangeProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.AccumulatorRangeProof.repeatedFields_, null);
};
goog.inherits(proto.types.AccumulatorRangeProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.AccumulatorRangeProof.displayName = 'proto.types.AccumulatorRangeProof';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.AccumulatorRangeProof.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.AccumulatorRangeProof.prototype.toObject = function(opt_includeInstance) {
  return proto.types.AccumulatorRangeProof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.AccumulatorRangeProof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.AccumulatorRangeProof.toObject = function(includeInstance, msg) {
  var f, obj = {
    leftSiblingsList: msg.getLeftSiblingsList_asB64(),
    rightSiblingsList: msg.getRightSiblingsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.AccumulatorRangeProof}
 */
proto.types.AccumulatorRangeProof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.AccumulatorRangeProof;
  return proto.types.AccumulatorRangeProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.AccumulatorRangeProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.AccumulatorRangeProof}
 */
proto.types.AccumulatorRangeProof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addLeftSiblings(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addRightSiblings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.AccumulatorRangeProof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.AccumulatorRangeProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.AccumulatorRangeProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.AccumulatorRangeProof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLeftSiblingsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
  f = message.getRightSiblingsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
};


/**
 * repeated bytes left_siblings = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.types.AccumulatorRangeProof.prototype.getLeftSiblingsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes left_siblings = 1;
 * This is a type-conversion wrapper around `getLeftSiblingsList()`
 * @return {!Array<string>}
 */
proto.types.AccumulatorRangeProof.prototype.getLeftSiblingsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getLeftSiblingsList()));
};


/**
 * repeated bytes left_siblings = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLeftSiblingsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.types.AccumulatorRangeProof.prototype.getLeftSiblingsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getLeftSiblingsList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.types.AccumulatorRangeProof.prototype.setLeftSiblingsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.types.AccumulatorRangeProof.prototype.addLeftSiblings = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.types.AccumulatorRangeProof.prototype.clearLeftSiblingsList = function() {
  this.setLeftSiblingsList([]);
};


/**
 * repeated bytes right_siblings = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.types.AccumulatorRangeProof.prototype.getRightSiblingsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes right_siblings = 2;
 * This is a type-conversion wrapper around `getRightSiblingsList()`
 * @return {!Array<string>}
 */
proto.types.AccumulatorRangeProof.prototype.getRightSiblingsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getRightSiblingsList()));
};


/**
 * repeated bytes right_siblings = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRightSiblingsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.types.AccumulatorRangeProof.prototype.getRightSiblingsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getRightSiblingsList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.types.AccumulatorRangeProof.prototype.setRightSiblingsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.types.AccumulatorRangeProof.prototype.addRightSiblings = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.types.AccumulatorRangeProof.prototype.clearRightSiblingsList = function() {
  this.setRightSiblingsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.TransactionProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.TransactionProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.TransactionProof.displayName = 'proto.types.TransactionProof';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.TransactionProof.prototype.toObject = function(opt_includeInstance) {
  return proto.types.TransactionProof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.TransactionProof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.TransactionProof.toObject = function(includeInstance, msg) {
  var f, obj = {
    ledgerInfoToTransactionInfoProof: (f = msg.getLedgerInfoToTransactionInfoProof()) && proto.types.AccumulatorProof.toObject(includeInstance, f),
    transactionInfo: (f = msg.getTransactionInfo()) && transaction_info_pb.TransactionInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.TransactionProof}
 */
proto.types.TransactionProof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.TransactionProof;
  return proto.types.TransactionProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.TransactionProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.TransactionProof}
 */
proto.types.TransactionProof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.AccumulatorProof;
      reader.readMessage(value,proto.types.AccumulatorProof.deserializeBinaryFromReader);
      msg.setLedgerInfoToTransactionInfoProof(value);
      break;
    case 2:
      var value = new transaction_info_pb.TransactionInfo;
      reader.readMessage(value,transaction_info_pb.TransactionInfo.deserializeBinaryFromReader);
      msg.setTransactionInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.TransactionProof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.TransactionProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.TransactionProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.TransactionProof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLedgerInfoToTransactionInfoProof();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.types.AccumulatorProof.serializeBinaryToWriter
    );
  }
  f = message.getTransactionInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      transaction_info_pb.TransactionInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional AccumulatorProof ledger_info_to_transaction_info_proof = 1;
 * @return {?proto.types.AccumulatorProof}
 */
proto.types.TransactionProof.prototype.getLedgerInfoToTransactionInfoProof = function() {
  return /** @type{?proto.types.AccumulatorProof} */ (
    jspb.Message.getWrapperField(this, proto.types.AccumulatorProof, 1));
};


/** @param {?proto.types.AccumulatorProof|undefined} value */
proto.types.TransactionProof.prototype.setLedgerInfoToTransactionInfoProof = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.types.TransactionProof.prototype.clearLedgerInfoToTransactionInfoProof = function() {
  this.setLedgerInfoToTransactionInfoProof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.TransactionProof.prototype.hasLedgerInfoToTransactionInfoProof = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TransactionInfo transaction_info = 2;
 * @return {?proto.types.TransactionInfo}
 */
proto.types.TransactionProof.prototype.getTransactionInfo = function() {
  return /** @type{?proto.types.TransactionInfo} */ (
    jspb.Message.getWrapperField(this, transaction_info_pb.TransactionInfo, 2));
};


/** @param {?proto.types.TransactionInfo|undefined} value */
proto.types.TransactionProof.prototype.setTransactionInfo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.types.TransactionProof.prototype.clearTransactionInfo = function() {
  this.setTransactionInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.TransactionProof.prototype.hasTransactionInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.AccountStateProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.AccountStateProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.AccountStateProof.displayName = 'proto.types.AccountStateProof';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.AccountStateProof.prototype.toObject = function(opt_includeInstance) {
  return proto.types.AccountStateProof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.AccountStateProof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.AccountStateProof.toObject = function(includeInstance, msg) {
  var f, obj = {
    ledgerInfoToTransactionInfoProof: (f = msg.getLedgerInfoToTransactionInfoProof()) && proto.types.AccumulatorProof.toObject(includeInstance, f),
    transactionInfo: (f = msg.getTransactionInfo()) && transaction_info_pb.TransactionInfo.toObject(includeInstance, f),
    transactionInfoToAccountProof: (f = msg.getTransactionInfoToAccountProof()) && proto.types.SparseMerkleProof.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.AccountStateProof}
 */
proto.types.AccountStateProof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.AccountStateProof;
  return proto.types.AccountStateProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.AccountStateProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.AccountStateProof}
 */
proto.types.AccountStateProof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.AccumulatorProof;
      reader.readMessage(value,proto.types.AccumulatorProof.deserializeBinaryFromReader);
      msg.setLedgerInfoToTransactionInfoProof(value);
      break;
    case 2:
      var value = new transaction_info_pb.TransactionInfo;
      reader.readMessage(value,transaction_info_pb.TransactionInfo.deserializeBinaryFromReader);
      msg.setTransactionInfo(value);
      break;
    case 3:
      var value = new proto.types.SparseMerkleProof;
      reader.readMessage(value,proto.types.SparseMerkleProof.deserializeBinaryFromReader);
      msg.setTransactionInfoToAccountProof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.AccountStateProof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.AccountStateProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.AccountStateProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.AccountStateProof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLedgerInfoToTransactionInfoProof();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.types.AccumulatorProof.serializeBinaryToWriter
    );
  }
  f = message.getTransactionInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      transaction_info_pb.TransactionInfo.serializeBinaryToWriter
    );
  }
  f = message.getTransactionInfoToAccountProof();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.types.SparseMerkleProof.serializeBinaryToWriter
    );
  }
};


/**
 * optional AccumulatorProof ledger_info_to_transaction_info_proof = 1;
 * @return {?proto.types.AccumulatorProof}
 */
proto.types.AccountStateProof.prototype.getLedgerInfoToTransactionInfoProof = function() {
  return /** @type{?proto.types.AccumulatorProof} */ (
    jspb.Message.getWrapperField(this, proto.types.AccumulatorProof, 1));
};


/** @param {?proto.types.AccumulatorProof|undefined} value */
proto.types.AccountStateProof.prototype.setLedgerInfoToTransactionInfoProof = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.types.AccountStateProof.prototype.clearLedgerInfoToTransactionInfoProof = function() {
  this.setLedgerInfoToTransactionInfoProof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.AccountStateProof.prototype.hasLedgerInfoToTransactionInfoProof = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TransactionInfo transaction_info = 2;
 * @return {?proto.types.TransactionInfo}
 */
proto.types.AccountStateProof.prototype.getTransactionInfo = function() {
  return /** @type{?proto.types.TransactionInfo} */ (
    jspb.Message.getWrapperField(this, transaction_info_pb.TransactionInfo, 2));
};


/** @param {?proto.types.TransactionInfo|undefined} value */
proto.types.AccountStateProof.prototype.setTransactionInfo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.types.AccountStateProof.prototype.clearTransactionInfo = function() {
  this.setTransactionInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.AccountStateProof.prototype.hasTransactionInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SparseMerkleProof transaction_info_to_account_proof = 3;
 * @return {?proto.types.SparseMerkleProof}
 */
proto.types.AccountStateProof.prototype.getTransactionInfoToAccountProof = function() {
  return /** @type{?proto.types.SparseMerkleProof} */ (
    jspb.Message.getWrapperField(this, proto.types.SparseMerkleProof, 3));
};


/** @param {?proto.types.SparseMerkleProof|undefined} value */
proto.types.AccountStateProof.prototype.setTransactionInfoToAccountProof = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.types.AccountStateProof.prototype.clearTransactionInfoToAccountProof = function() {
  this.setTransactionInfoToAccountProof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.AccountStateProof.prototype.hasTransactionInfoToAccountProof = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.EventProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.EventProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.EventProof.displayName = 'proto.types.EventProof';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.EventProof.prototype.toObject = function(opt_includeInstance) {
  return proto.types.EventProof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.EventProof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.EventProof.toObject = function(includeInstance, msg) {
  var f, obj = {
    ledgerInfoToTransactionInfoProof: (f = msg.getLedgerInfoToTransactionInfoProof()) && proto.types.AccumulatorProof.toObject(includeInstance, f),
    transactionInfo: (f = msg.getTransactionInfo()) && transaction_info_pb.TransactionInfo.toObject(includeInstance, f),
    transactionInfoToEventProof: (f = msg.getTransactionInfoToEventProof()) && proto.types.AccumulatorProof.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.EventProof}
 */
proto.types.EventProof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.EventProof;
  return proto.types.EventProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.EventProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.EventProof}
 */
proto.types.EventProof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.AccumulatorProof;
      reader.readMessage(value,proto.types.AccumulatorProof.deserializeBinaryFromReader);
      msg.setLedgerInfoToTransactionInfoProof(value);
      break;
    case 2:
      var value = new transaction_info_pb.TransactionInfo;
      reader.readMessage(value,transaction_info_pb.TransactionInfo.deserializeBinaryFromReader);
      msg.setTransactionInfo(value);
      break;
    case 3:
      var value = new proto.types.AccumulatorProof;
      reader.readMessage(value,proto.types.AccumulatorProof.deserializeBinaryFromReader);
      msg.setTransactionInfoToEventProof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.EventProof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.EventProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.EventProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.EventProof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLedgerInfoToTransactionInfoProof();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.types.AccumulatorProof.serializeBinaryToWriter
    );
  }
  f = message.getTransactionInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      transaction_info_pb.TransactionInfo.serializeBinaryToWriter
    );
  }
  f = message.getTransactionInfoToEventProof();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.types.AccumulatorProof.serializeBinaryToWriter
    );
  }
};


/**
 * optional AccumulatorProof ledger_info_to_transaction_info_proof = 1;
 * @return {?proto.types.AccumulatorProof}
 */
proto.types.EventProof.prototype.getLedgerInfoToTransactionInfoProof = function() {
  return /** @type{?proto.types.AccumulatorProof} */ (
    jspb.Message.getWrapperField(this, proto.types.AccumulatorProof, 1));
};


/** @param {?proto.types.AccumulatorProof|undefined} value */
proto.types.EventProof.prototype.setLedgerInfoToTransactionInfoProof = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.types.EventProof.prototype.clearLedgerInfoToTransactionInfoProof = function() {
  this.setLedgerInfoToTransactionInfoProof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.EventProof.prototype.hasLedgerInfoToTransactionInfoProof = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TransactionInfo transaction_info = 2;
 * @return {?proto.types.TransactionInfo}
 */
proto.types.EventProof.prototype.getTransactionInfo = function() {
  return /** @type{?proto.types.TransactionInfo} */ (
    jspb.Message.getWrapperField(this, transaction_info_pb.TransactionInfo, 2));
};


/** @param {?proto.types.TransactionInfo|undefined} value */
proto.types.EventProof.prototype.setTransactionInfo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.types.EventProof.prototype.clearTransactionInfo = function() {
  this.setTransactionInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.EventProof.prototype.hasTransactionInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AccumulatorProof transaction_info_to_event_proof = 3;
 * @return {?proto.types.AccumulatorProof}
 */
proto.types.EventProof.prototype.getTransactionInfoToEventProof = function() {
  return /** @type{?proto.types.AccumulatorProof} */ (
    jspb.Message.getWrapperField(this, proto.types.AccumulatorProof, 3));
};


/** @param {?proto.types.AccumulatorProof|undefined} value */
proto.types.EventProof.prototype.setTransactionInfoToEventProof = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.types.EventProof.prototype.clearTransactionInfoToEventProof = function() {
  this.setTransactionInfoToEventProof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.EventProof.prototype.hasTransactionInfoToEventProof = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.TransactionListProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.TransactionListProof.repeatedFields_, null);
};
goog.inherits(proto.types.TransactionListProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.TransactionListProof.displayName = 'proto.types.TransactionListProof';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.TransactionListProof.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.TransactionListProof.prototype.toObject = function(opt_includeInstance) {
  return proto.types.TransactionListProof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.TransactionListProof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.TransactionListProof.toObject = function(includeInstance, msg) {
  var f, obj = {
    ledgerInfoToTransactionInfosProof: (f = msg.getLedgerInfoToTransactionInfosProof()) && proto.types.AccumulatorRangeProof.toObject(includeInstance, f),
    transactionInfosList: jspb.Message.toObjectList(msg.getTransactionInfosList(),
    transaction_info_pb.TransactionInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.TransactionListProof}
 */
proto.types.TransactionListProof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.TransactionListProof;
  return proto.types.TransactionListProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.TransactionListProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.TransactionListProof}
 */
proto.types.TransactionListProof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.AccumulatorRangeProof;
      reader.readMessage(value,proto.types.AccumulatorRangeProof.deserializeBinaryFromReader);
      msg.setLedgerInfoToTransactionInfosProof(value);
      break;
    case 2:
      var value = new transaction_info_pb.TransactionInfo;
      reader.readMessage(value,transaction_info_pb.TransactionInfo.deserializeBinaryFromReader);
      msg.addTransactionInfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.TransactionListProof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.TransactionListProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.TransactionListProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.TransactionListProof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLedgerInfoToTransactionInfosProof();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.types.AccumulatorRangeProof.serializeBinaryToWriter
    );
  }
  f = message.getTransactionInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      transaction_info_pb.TransactionInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional AccumulatorRangeProof ledger_info_to_transaction_infos_proof = 1;
 * @return {?proto.types.AccumulatorRangeProof}
 */
proto.types.TransactionListProof.prototype.getLedgerInfoToTransactionInfosProof = function() {
  return /** @type{?proto.types.AccumulatorRangeProof} */ (
    jspb.Message.getWrapperField(this, proto.types.AccumulatorRangeProof, 1));
};


/** @param {?proto.types.AccumulatorRangeProof|undefined} value */
proto.types.TransactionListProof.prototype.setLedgerInfoToTransactionInfosProof = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.types.TransactionListProof.prototype.clearLedgerInfoToTransactionInfosProof = function() {
  this.setLedgerInfoToTransactionInfosProof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.TransactionListProof.prototype.hasLedgerInfoToTransactionInfosProof = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated TransactionInfo transaction_infos = 2;
 * @return {!Array<!proto.types.TransactionInfo>}
 */
proto.types.TransactionListProof.prototype.getTransactionInfosList = function() {
  return /** @type{!Array<!proto.types.TransactionInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, transaction_info_pb.TransactionInfo, 2));
};


/** @param {!Array<!proto.types.TransactionInfo>} value */
proto.types.TransactionListProof.prototype.setTransactionInfosList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.types.TransactionInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.TransactionInfo}
 */
proto.types.TransactionListProof.prototype.addTransactionInfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.types.TransactionInfo, opt_index);
};


proto.types.TransactionListProof.prototype.clearTransactionInfosList = function() {
  this.setTransactionInfosList([]);
};


goog.object.extend(exports, proto.types);
